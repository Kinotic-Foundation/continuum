/*
 *
 * Copyright 2008-2021 Kinotic and the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kinotic.continuum.core.api.security;

import org.kinotic.continuum.api.annotations.Publish;
import org.kinotic.continuum.api.annotations.Version;
import reactor.core.publisher.Mono;

/**
 * {@link SecurityService} provides core security functionality.
 *
 *
 * Created by navid on 2019-05-01.
 */
@Publish
@Version("0.1.0")
public interface SecurityService {

    /**
     * Check if a given participant can authenticate
     * @param accessKey the unique identifier representing the {@link Participant}'s authentication mechanism
     * @param secretToken the OTP generated by the participant to prove their identity
     * @return a {@link Mono} completing with a {@link Participant} if authentication was successful or an error if authentication failed
     */
    Mono<Participant> authenticate(String accessKey, String secretToken);

    /**
     * Finds a {@link Participant} for the given participantIdentity
     * @param participantIdentity a string containing the identity for the desired {@link Participant}
     * @return a {@link Mono} containing the {@link Participant} or an error if not {@link Participant} for the identity can be found
     */
    Mono<Participant> findParticipant(String participantIdentity);

}
