plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id 'org.kinotic.java-common-conventions'

    id 'org.springframework.boot'
    id 'groovy'
    id 'application'
}

dependencies {

	// We publish the common dependencies in both this and the library conventions plugin. Otherwise the platform did not end up in consumers of the library projects..
	/** Begin Common Dependencies **/
	implementation platform(project(':continuum-platform'))
	//noinspection DependencyNotationArgument
	annotationProcessor platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	implementation "org.apache.commons:commons-lang3"

	implementation "ch.qos.logback:logback-core"
	implementation "ch.qos.logback:logback-classic"

	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	/** End Common Dependencies **/


	/** Application Common Dependencies **/

	// Continuum Dependencies
	implementation project(':continuum-core')
	implementation project(':continuum-core-vertx')

	implementation 'org.codehaus.groovy:groovy'
	implementation 'org.springframework.boot:spring-boot-starter'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

// Options to configure here https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image
// bootBuildImage task source https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootBuildImage.java
bootBuildImage {
	network = "host"
	publish = true
	imageName = "kinotic/${project.name}:${project.version}"
	tags = [
			"kinotic/${project.name}:latest"
	]
	environment = [
			"BPE_DELIM_JAVA_TOOL_OPTIONS" : " ",
			"BPE_APPEND_JAVA_TOOL_OPTIONS" : "-XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC"
	]
	docker {
		publishRegistry {
			username = System.getenv("DOCKER_HUB_USERNAME")
			password = System.getenv("DOCKER_HUB_PASSWORD")
		}
	}
}
/**
 * Default Environment Vars
 * The following should be configured on launch as well
 * 		"--spring.profiles.active=production"
 */
// These properties
applicationDefaultJvmArgs = [
		"-Djava.awt.headless=true",
		"-Djava.net.preferIPv4Stack=true",
		"-Dvertx.disableDnsResolver=true", // done because of this issue.. https://github.com/eclipse/vert.x/issues/1753 http://stackoverflow.com/questions/42110790/vertx-httpclient-getnow-not-working
		"-server",
		"-XX:+AlwaysPreTouch",
		"-XX:+UseG1GC",
		"-XX:+ScavengeBeforeFullGC",
		"-XX:+DisableExplicitGC"
]
