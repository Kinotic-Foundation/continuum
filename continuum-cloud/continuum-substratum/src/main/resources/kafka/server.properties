# Enables autocreation of a topic on the server.
auto.create.topics.enable=true

# default replication factors for automatically created topics
default.replication.factor=3

# When a producer sets acks to "all" (or "-1"), min.insync.replicas specifies the minimum number of replicas
# that must acknowledge a write for the write to be considered successful.
# If this minimum can't be met, the producer raises an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).
#
# When used together, min.insync.replicas and acks enable you to enforce greater durability guarantees.
# A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of "all".
# This ensures that the producer raises an exception if a majority of replicas do not receive a write.
min.insync.replicas=2

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=6


############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The default cleanup policy for segments beyond the retention window.
# A comma separated list of valid policies. Valid policies are: "delete" and "compact"
log.cleanup.policy=delete

# The minimum age of a log file to be eligible for deletion due to age
# log.retention.ms by setting this to -1 we keep logs forever
log.retention.ms=-1

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# After a consumer group loses all its consumers (i.e. becomes empty) its offsets will be kept for this retention period before getting discarded.
# For standalone consumers (using manual assignment), offsets will be expired after the time of last commit plus this retention period.
# Set to 90 days
offsets.retention.minutes=129600

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=5

# Replication configurations
num.replica.fetchers=4
replica.fetch.max.bytes=1048576
replica.fetch.wait.max.ms=500
replica.high.watermark.checkpoint.interval.ms=5000
replica.socket.timeout.ms=60000
replica.socket.receive.buffer.bytes=65536
replica.lag.time.max.ms=30000
replica.lag.max.messages=4000

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600
unclean.leader.election.enable=false

