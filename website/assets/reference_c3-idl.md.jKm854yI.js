import{_ as a,c as t,a1 as n,o as i}from"./chunks/framework.Cfc8-9XP.js";const u=JSON.parse('{"title":"C3 IDL Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"reference/c3-idl.md","filePath":"reference/c3-idl.md"}'),o={name:"reference/c3-idl.md"};function r(s,e,l,c,p,d){return i(),t("div",null,e[0]||(e[0]=[n('<h1 id="c3-idl-documentation" tabindex="-1">C3 IDL Documentation <a class="header-anchor" href="#c3-idl-documentation" aria-label="Permalink to &quot;C3 IDL Documentation&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The C3 Interface Definition Language (IDL) is a schema language within the Continuum platform from Kinotic. It&#39;s used for defining and managing data types to ensure interoperability and smooth integration across different system components by offering a structured method for defining complex data types and their properties.</p><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><h3 id="c3type-base-class" tabindex="-1">C3Type Base Class <a class="header-anchor" href="#c3type-base-class" aria-label="Permalink to &quot;C3Type Base Class&quot;">​</a></h3><ul><li><strong>Description</strong>: The foundational class for all type schemas. Used to create various data types in the IDL.</li></ul><h3 id="complexc3type" tabindex="-1">ComplexC3Type <a class="header-anchor" href="#complexc3type" aria-label="Permalink to &quot;ComplexC3Type&quot;">​</a></h3><ul><li><strong>Description</strong>: An abstract class extending <code>C3Type</code>, representing complex data types with namespaces, names, decorators, and metadata.</li></ul><h3 id="unionc3type" tabindex="-1">UnionC3Type <a class="header-anchor" href="#unionc3type" aria-label="Permalink to &quot;UnionC3Type&quot;">​</a></h3><ul><li><strong>Description</strong>: Defines a union type, allowing a data type to be one of several specified types. Useful for types that may vary across contexts.</li></ul><h3 id="enumc3type" tabindex="-1">EnumC3Type <a class="header-anchor" href="#enumc3type" aria-label="Permalink to &quot;EnumC3Type&quot;">​</a></h3><ul><li><strong>Description</strong>: Defines an enumeration with a list of predefined constants, ideal for types with a fixed set of values.</li></ul><h3 id="objectc3type" tabindex="-1">ObjectC3Type <a class="header-anchor" href="#objectc3type" aria-label="Permalink to &quot;ObjectC3Type&quot;">​</a></h3><ul><li><strong>Description</strong>: Represents a complex object type with inheritance. It specifies properties and their types using other <code>C3Type</code> definitions.</li></ul><h3 id="primitive-types" tabindex="-1">Primitive Types <a class="header-anchor" href="#primitive-types" aria-label="Permalink to &quot;Primitive Types&quot;">​</a></h3><h4 id="intc3type" tabindex="-1">IntC3Type <a class="header-anchor" href="#intc3type" aria-label="Permalink to &quot;IntC3Type&quot;">​</a></h4><ul><li><strong>Description</strong>: Represents integer values.</li></ul><h4 id="floatc3type" tabindex="-1">FloatC3Type <a class="header-anchor" href="#floatc3type" aria-label="Permalink to &quot;FloatC3Type&quot;">​</a></h4><ul><li><strong>Description</strong>: Represents float number values.</li></ul><h4 id="booleanc3type" tabindex="-1">BooleanC3Type <a class="header-anchor" href="#booleanc3type" aria-label="Permalink to &quot;BooleanC3Type&quot;">​</a></h4><ul><li><strong>Description</strong>: Represents boolean values.</li></ul><h4 id="charc3type" tabindex="-1">CharC3Type <a class="header-anchor" href="#charc3type" aria-label="Permalink to &quot;CharC3Type&quot;">​</a></h4><ul><li><strong>Description</strong>: Represents character values.</li></ul><h4 id="other-number-types" tabindex="-1">Other Number Types <a class="header-anchor" href="#other-number-types" aria-label="Permalink to &quot;Other Number Types&quot;">​</a></h4><ul><li><strong>ByteC3Type</strong>: For byte values.</li><li><strong>ShortC3Type</strong>: For short integers.</li><li><strong>DoubleC3Type</strong>: For double-precision numbers.</li><li><strong>LongC3Type</strong>: For long integers.</li></ul><h3 id="referencec3type" tabindex="-1">ReferenceC3Type <a class="header-anchor" href="#referencec3type" aria-label="Permalink to &quot;ReferenceC3Type&quot;">​</a></h3><ul><li><strong>Description</strong>: Facilitates referencing other components within the schema, promoting modular and reusable designs.</li></ul><h2 id="decorators" tabindex="-1">Decorators <a class="header-anchor" href="#decorators" aria-label="Permalink to &quot;Decorators&quot;">​</a></h2><ul><li><strong>Purpose</strong>: Types implementing <code>HasDecorators</code> can have C3Decorator instances, enhancing functionality with metadata descriptions and rendering hints.</li></ul><h2 id="namespaces-and-service-definitions" tabindex="-1">Namespaces and Service Definitions <a class="header-anchor" href="#namespaces-and-service-definitions" aria-label="Permalink to &quot;Namespaces and Service Definitions&quot;">​</a></h2><h3 id="namespacedefinition" tabindex="-1">NamespaceDefinition <a class="header-anchor" href="#namespacedefinition" aria-label="Permalink to &quot;NamespaceDefinition&quot;">​</a></h3><ul><li><strong>Description</strong>: Organizes <code>ComplexC3Type</code> and <code>ServiceDefinition</code> instances within a named scope, aiding logical system separation.</li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>The C3Type IDL is a robust framework for defining data types in a consistent and interoperable fashion. Through its structures and features, developers can form detailed type definitions that foster system integration and efficient data management within the Continuum platform.</p>',34)]))}const m=a(o,[["render",r]]);export{u as __pageData,m as default};
