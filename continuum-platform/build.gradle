plugins {
    id 'java-platform'

    id 'maven-publish'
    id 'signing'
}

group 'org.kinotic'
version "${continuumVersion}"

javaPlatform {
    // Declare that your platform contains dependencies
    allowDependencies()
}

ext {
    apacheCommonsLangVersion='3.14.0'
    apacheCommonsTextVersion='1.11.0'
    chronicleQueueVersion='5.24ea27'
    commonsIoVersion='2.15.1'
    failsafeVersion='3.3.2'
    groovyVersion='3.0.10'
    igniteVersion='2.15.0'
    jacksonVersion='2.16.0'
    jCacheApiVersion='1.0.0'
    jsonPathVersion='2.8.0'
    kafkaVersion='3.6.1'
    logbackVersion='1.2.13'
    nettyVersion='4.1.101.Final'
    reactorKafkaVersion='1.3.22'
    springBootVersion='2.7.18'
    springKafkaVersion='2.9.13'
    vertxVersion='3.9.16'
    vertxCompletableFutureVersion='0.1.2'
    vertxStompLiteVersion='3.9.19'
    vertxBeansVersion='1.6.2'
    zookeeperVersion='3.7.2'
}

/**
 * Spring Boot Managed Dependency Coordinates
 * https://docs.spring.io/spring-boot/docs/2.6.7/reference/html/dependency-versions.html
 *
 * Kafka Version Compatibility Guides
 *
 * NOTE: Im sticking all the links here for reference. To determine actual versions needed you really have to look at and think about all of the pieces.
 *
 * Links:
 *  AWS MSK Kafka versions
 *  https://docs.aws.amazon.com/msk/latest/developerguide/supported-kafka-versions.html
 *
 *  Spring Kafka Version Requirements
 *  https://docs.spring.io/spring-kafka/docs/current/reference/html/#compatibility
 */

dependencies {
    api platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    constraints {

        api "ch.qos.logback:logback-core:${logbackVersion}"
        api "ch.qos.logback:logback-classic:${logbackVersion}"

        api "commons-io:commons-io:${commonsIoVersion}"

        api "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
        api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

        api "com.jayway.jsonpath:json-path:${jsonPathVersion}"

        api "io.projectreactor.kafka:reactor-kafka:${reactorKafkaVersion}"

        // Override netty versions so we can patch security issues
        // This needs to be the complete list used by vertx
        api "io.netty:netty-buffer:${nettyVersion}"
        api "io.netty:netty-codec-http2:${nettyVersion}"
        api "io.netty:netty-codec-http:${nettyVersion}"
        api "io.netty:netty-common:${nettyVersion}"
        api "io.netty:netty-handler-proxy:${nettyVersion}"
        api "io.netty:netty-handler:${nettyVersion}"
        api "io.netty:netty-resolver-dns:${nettyVersion}"
        api "io.netty:netty-resolver:${nettyVersion}"
        api "io.netty:netty-transport:${nettyVersion}"

        api "io.vertx:vertx-core:${vertxVersion}"
        api "io.vertx:vertx-web:${vertxVersion}"
        api "io.vertx:vertx-web-client:${vertxVersion}"
        api "io.vertx:vertx-auth-common:${vertxVersion}"
        api "io.vertx:vertx-mqtt:${vertxVersion}"
        api "io.vertx:vertx-ignite:${vertxVersion}"
        api "io.vertx:vertx-reactive-streams:${vertxVersion}"
        api "io.vertx:vertx-web-graphql:${vertxVersion}"
        api "io.vertx:vertx-health-check:${vertxVersion}"
        api "com.github.rworsnop:vertx-beans:${vertxBeansVersion}"
        api "me.escoffier.vertx:vertx-completable-future:${vertxCompletableFutureVersion}"

        api "javax.cache:cache-api:${jCacheApiVersion}"

        api "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
        api "org.apache.commons:commons-text:${apacheCommonsTextVersion}"

        api "org.apache.ignite:ignite-core:${igniteVersion}"
        api "org.apache.ignite:ignite-indexing:${igniteVersion}"
        api "org.apache.ignite:ignite-calcite:${igniteVersion}"
        api "org.apache.ignite:ignite-spring:${igniteVersion}"
        api "org.apache.ignite:ignite-slf4j:${igniteVersion}"
        api "org.apache.ignite:ignite-zookeeper:${igniteVersion}"
        api "org.apache.ignite:ignite-kubernetes:${igniteVersion}"

        api "org.apache.kafka:kafka-clients:${kafkaVersion}"

        api "net.jodah:failsafe:${failsafeVersion}"

        api "net.openhft:chronicle-queue:${chronicleQueueVersion}"

        api "org.apache.zookeeper:zookeeper:${zookeeperVersion}"

        api "org.codehaus.groovy:groovy:${groovyVersion}"

        api "org.kinotic:vertx-stomp-lite:${vertxStompLiteVersion}"

        api "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
        api "org.springframework.boot:org.springframework.boot.gradle.plugin:${springBootVersion}"
        api "org.springframework.kafka:spring-kafka:${springKafkaVersion}"
    }

}


publishing {
    publications {
        mavenPlatform(MavenPublication) {

            from components.javaPlatform

            pom {
                name = 'Continuum Framework'
                description = 'A Microservice and IOT framework for everyone!'
                url = 'https://continuumframework.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Kinotic Developers'
                        email = 'develop@kinotic.org'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Kinotic-Foundation/continuum-framework.git'
                    developerConnection = 'scm:git:https://github.com/Kinotic-Foundation/continuum-framework.git'
                    url = 'https://github.com/Kinotic-Foundation/continuum-framework'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('MAVEN_USERNAME')
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenPlatform
}
