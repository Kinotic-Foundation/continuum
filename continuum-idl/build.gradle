plugins {
	id 'org.kinotic.java-common-conventions'

	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'io.freefair.lombok'
}

version = "${continuumIdlVersion}"

dependencies {

	implementation project(':continuum-core')

	implementation 'org.apache.groovy:groovy'
	implementation 'org.springframework.boot:spring-boot-starter'

	implementation 'com.fasterxml.jackson.core:jackson-annotations'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	testImplementation 'org.springframework.boot:spring-boot-starter-json'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


publishing {
	publications {
		mavenJava(MavenPublication) {

			from components.java

			// Use resolved versions since we are not directly depending on the spring POM
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			pom {
				name = 'Continuum Framework'
				description = 'A Microservice and IOT framework for everyone!'
				url = 'https://continuumframework.org'

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						name = 'Kinotic Developers'
						email = 'develop@kinotic.org'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/Kinotic-Foundation/continuum-framework.git'
					developerConnection = 'scm:git:https://github.com/Kinotic-Foundation/continuum-framework.git'
					url = 'https://github.com/Kinotic-Foundation/continuum-framework'
				}
			}
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
			def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = System.getenv('MAVEN_USERNAME')
				password = System.getenv('MAVEN_PASSWORD')
			}
		}
	}
}
